        -:    0:Source:Vector_Test.cpp
        -:    1:#include "Vector.h"
        -:    2:#include <UnitTest++/UnitTest++.h>
        -:    3:#include <sstream>
        -:    4:#include <stdexcept>
        -:    5:#include <cmath>
        -:    6:
        -:    7:using namespace std;
        -:    8:
        2:    9:TEST(Vector_default_constructor) {
        1:   10:    Vector vector;
        -:   11:    double x, y, z;
        -:   12:
        1:   13:    vector.get_start_point(x, y, z);
        1:   14:    CHECK_EQUAL(0.0, x);
        1:   15:    CHECK_EQUAL(0.0, y);
        1:   16:    CHECK_EQUAL(0.0, z);
        -:   17:
        1:   18:    vector.get_end_point(x, y, z);
        1:   19:    CHECK_EQUAL(0.0, x);
        1:   20:    CHECK_EQUAL(0.0, y);
        1:   21:    CHECK_EQUAL(0.0, z);
        1:   22:}
------------------
_ZNK30TestVector_default_constructor7RunImplEv:
        1:    9:TEST(Vector_default_constructor) {
        1:   10:    Vector vector;
        -:   11:    double x, y, z;
        -:   12:
        1:   13:    vector.get_start_point(x, y, z);
        1:   14:    CHECK_EQUAL(0.0, x);
        1:   15:    CHECK_EQUAL(0.0, y);
        1:   16:    CHECK_EQUAL(0.0, z);
        -:   17:
        1:   18:    vector.get_end_point(x, y, z);
        1:   19:    CHECK_EQUAL(0.0, x);
        1:   20:    CHECK_EQUAL(0.0, y);
        1:   21:    CHECK_EQUAL(0.0, z);
        1:   22:}
------------------
_ZN30TestVector_default_constructorC2Ev:
        1:    9:TEST(Vector_default_constructor) {
------------------
        -:   23:
        2:   24:TEST(Vector_parameterized_constructor) {
        1:   25:    Vector vector(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:   26:    double x, y, z;
        -:   27:
        1:   28:    vector.get_start_point(x, y, z);
        1:   29:    CHECK_EQUAL(1.0, x);
        1:   30:    CHECK_EQUAL(2.0, y);
        1:   31:    CHECK_EQUAL(3.0, z);
        -:   32:
        1:   33:    vector.get_end_point(x, y, z);
        1:   34:    CHECK_EQUAL(4.0, x);
        1:   35:    CHECK_EQUAL(5.0, y);
        1:   36:    CHECK_EQUAL(6.0, z);
        1:   37:}
------------------
_ZNK36TestVector_parameterized_constructor7RunImplEv:
        1:   24:TEST(Vector_parameterized_constructor) {
        1:   25:    Vector vector(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:   26:    double x, y, z;
        -:   27:
        1:   28:    vector.get_start_point(x, y, z);
        1:   29:    CHECK_EQUAL(1.0, x);
        1:   30:    CHECK_EQUAL(2.0, y);
        1:   31:    CHECK_EQUAL(3.0, z);
        -:   32:
        1:   33:    vector.get_end_point(x, y, z);
        1:   34:    CHECK_EQUAL(4.0, x);
        1:   35:    CHECK_EQUAL(5.0, y);
        1:   36:    CHECK_EQUAL(6.0, z);
        1:   37:}
------------------
_ZN36TestVector_parameterized_constructorC2Ev:
        1:   24:TEST(Vector_parameterized_constructor) {
------------------
        -:   38:
        2:   39:TEST(Vector_copy_constructor) {
        1:   40:    Vector original(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        1:   41:    Vector copy(original);
        -:   42:
        -:   43:    double x1, y1, z1, x2, y2, z2;
        -:   44:
        1:   45:    original.get_start_point(x1, y1, z1);
        1:   46:    copy.get_start_point(x2, y2, z2);
        1:   47:    CHECK_EQUAL(x1, x2);
        1:   48:    CHECK_EQUAL(y1, y2);
        1:   49:    CHECK_EQUAL(z1, z2);
        -:   50:
        1:   51:    original.get_end_point(x1, y1, z1);
        1:   52:    copy.get_end_point(x2, y2, z2);
        1:   53:    CHECK_EQUAL(x1, x2);
        1:   54:    CHECK_EQUAL(y1, y2);
        1:   55:    CHECK_EQUAL(z1, z2);
        1:   56:}
------------------
_ZNK27TestVector_copy_constructor7RunImplEv:
        1:   39:TEST(Vector_copy_constructor) {
        1:   40:    Vector original(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        1:   41:    Vector copy(original);
        -:   42:
        -:   43:    double x1, y1, z1, x2, y2, z2;
        -:   44:
        1:   45:    original.get_start_point(x1, y1, z1);
        1:   46:    copy.get_start_point(x2, y2, z2);
        1:   47:    CHECK_EQUAL(x1, x2);
        1:   48:    CHECK_EQUAL(y1, y2);
        1:   49:    CHECK_EQUAL(z1, z2);
        -:   50:
        1:   51:    original.get_end_point(x1, y1, z1);
        1:   52:    copy.get_end_point(x2, y2, z2);
        1:   53:    CHECK_EQUAL(x1, x2);
        1:   54:    CHECK_EQUAL(y1, y2);
        1:   55:    CHECK_EQUAL(z1, z2);
        1:   56:}
------------------
_ZN27TestVector_copy_constructorC2Ev:
        1:   39:TEST(Vector_copy_constructor) {
------------------
        -:   57:
        2:   58:TEST(Vector_length_calculation) {
        1:   59:    Vector vector1(0.0, 0.0, 0.0, 3.0, 4.0, 0.0);
        1:   60:    CHECK_EQUAL(5.0, vector1.length());
        -:   61:
        1:   62:    Vector vector2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
        1:   63:    CHECK_CLOSE(sqrt(3.0), vector2.length(), 1e-10);
        -:   64:
        1:   65:    Vector vector3(1.0, 2.0, 3.0, 4.0, 6.0, 9.0);
        1:   66:    double dx = 3.0, dy = 4.0, dz = 6.0;
        1:   67:    double expected = sqrt(dx * dx + dy * dy + dz * dz);
        1:   68:    CHECK_EQUAL(expected, vector3.length());
        1:   69:}
------------------
_ZNK29TestVector_length_calculation7RunImplEv:
        1:   58:TEST(Vector_length_calculation) {
        1:   59:    Vector vector1(0.0, 0.0, 0.0, 3.0, 4.0, 0.0);
        1:   60:    CHECK_EQUAL(5.0, vector1.length());
        -:   61:
        1:   62:    Vector vector2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
        1:   63:    CHECK_CLOSE(sqrt(3.0), vector2.length(), 1e-10);
        -:   64:
        1:   65:    Vector vector3(1.0, 2.0, 3.0, 4.0, 6.0, 9.0);
        1:   66:    double dx = 3.0, dy = 4.0, dz = 6.0;
        1:   67:    double expected = sqrt(dx * dx + dy * dy + dz * dz);
        1:   68:    CHECK_EQUAL(expected, vector3.length());
        1:   69:}
------------------
_ZN29TestVector_length_calculationC2Ev:
        1:   58:TEST(Vector_length_calculation) {
------------------
        -:   70:
        2:   71:TEST(Vector_addition) {
        1:   72:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:   73:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:   74:
        1:   75:    Vector result = vector1 + vector2;
        -:   76:
        -:   77:    double x, y, z;
        1:   78:    result.get_end_point(x, y, z);
        1:   79:    CHECK_EQUAL(5.0, x);
        1:   80:    CHECK_EQUAL(7.0, y);
        1:   81:    CHECK_EQUAL(9.0, z);
        1:   82:}
------------------
_ZNK19TestVector_addition7RunImplEv:
        1:   71:TEST(Vector_addition) {
        1:   72:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:   73:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:   74:
        1:   75:    Vector result = vector1 + vector2;
        -:   76:
        -:   77:    double x, y, z;
        1:   78:    result.get_end_point(x, y, z);
        1:   79:    CHECK_EQUAL(5.0, x);
        1:   80:    CHECK_EQUAL(7.0, y);
        1:   81:    CHECK_EQUAL(9.0, z);
        1:   82:}
------------------
_ZN19TestVector_additionC2Ev:
        1:   71:TEST(Vector_addition) {
------------------
        -:   83:
        2:   84:TEST(Vector_addition_assignment) {
        1:   85:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:   86:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:   87:
        1:   88:    vector1 += vector2;
        -:   89:
        -:   90:    double x, y, z;
        1:   91:    vector1.get_end_point(x, y, z);
        1:   92:    CHECK_EQUAL(5.0, x);
        1:   93:    CHECK_EQUAL(7.0, y);
        1:   94:    CHECK_EQUAL(9.0, z);
        1:   95:}
------------------
_ZNK30TestVector_addition_assignment7RunImplEv:
        1:   84:TEST(Vector_addition_assignment) {
        1:   85:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:   86:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:   87:
        1:   88:    vector1 += vector2;
        -:   89:
        -:   90:    double x, y, z;
        1:   91:    vector1.get_end_point(x, y, z);
        1:   92:    CHECK_EQUAL(5.0, x);
        1:   93:    CHECK_EQUAL(7.0, y);
        1:   94:    CHECK_EQUAL(9.0, z);
        1:   95:}
------------------
_ZN30TestVector_addition_assignmentC2Ev:
        1:   84:TEST(Vector_addition_assignment) {
------------------
        -:   96:
        2:   97:TEST(Vector_subtraction) {
        1:   98:    Vector vector1(0.0, 0.0, 0.0, 5.0, 7.0, 9.0);
        1:   99:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  100:
        1:  101:    Vector result = vector1 - vector2;
        -:  102:
        -:  103:    double x, y, z;
        1:  104:    result.get_end_point(x, y, z);
        1:  105:    CHECK_EQUAL(1.0, x);
        1:  106:    CHECK_EQUAL(2.0, y);
        1:  107:    CHECK_EQUAL(3.0, z);
        1:  108:}
------------------
_ZNK22TestVector_subtraction7RunImplEv:
        1:   97:TEST(Vector_subtraction) {
        1:   98:    Vector vector1(0.0, 0.0, 0.0, 5.0, 7.0, 9.0);
        1:   99:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  100:
        1:  101:    Vector result = vector1 - vector2;
        -:  102:
        -:  103:    double x, y, z;
        1:  104:    result.get_end_point(x, y, z);
        1:  105:    CHECK_EQUAL(1.0, x);
        1:  106:    CHECK_EQUAL(2.0, y);
        1:  107:    CHECK_EQUAL(3.0, z);
        1:  108:}
------------------
_ZN22TestVector_subtractionC2Ev:
        1:   97:TEST(Vector_subtraction) {
------------------
        -:  109:
        2:  110:TEST(Vector_subtraction_assignment) {
        1:  111:    Vector vector1(0.0, 0.0, 0.0, 5.0, 7.0, 9.0);
        1:  112:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  113:
        1:  114:    vector1 -= vector2;
        -:  115:
        -:  116:    double x, y, z;
        1:  117:    vector1.get_end_point(x, y, z);
        1:  118:    CHECK_EQUAL(1.0, x);
        1:  119:    CHECK_EQUAL(2.0, y);
        1:  120:    CHECK_EQUAL(3.0, z);
        1:  121:}
------------------
_ZNK33TestVector_subtraction_assignment7RunImplEv:
        1:  110:TEST(Vector_subtraction_assignment) {
        1:  111:    Vector vector1(0.0, 0.0, 0.0, 5.0, 7.0, 9.0);
        1:  112:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  113:
        1:  114:    vector1 -= vector2;
        -:  115:
        -:  116:    double x, y, z;
        1:  117:    vector1.get_end_point(x, y, z);
        1:  118:    CHECK_EQUAL(1.0, x);
        1:  119:    CHECK_EQUAL(2.0, y);
        1:  120:    CHECK_EQUAL(3.0, z);
        1:  121:}
------------------
_ZN33TestVector_subtraction_assignmentC2Ev:
        1:  110:TEST(Vector_subtraction_assignment) {
------------------
        -:  122:
        2:  123:TEST(Vector_scalar) {
        1:  124:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  125:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  126:
        1:  127:    double result = vector1 * vector2;
        1:  128:    CHECK_EQUAL(32.0, result);
        1:  129:}
------------------
_ZNK17TestVector_scalar7RunImplEv:
        1:  123:TEST(Vector_scalar) {
        1:  124:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  125:    Vector vector2(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        -:  126:
        1:  127:    double result = vector1 * vector2;
        1:  128:    CHECK_EQUAL(32.0, result);
        1:  129:}
------------------
_ZN17TestVector_scalarC2Ev:
        1:  123:TEST(Vector_scalar) {
------------------
        -:  130:
        2:  131:TEST(Vector_cross) {
        1:  132:    Vector vector1(0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        1:  133:    Vector vector2(0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
        -:  134:
        1:  135:    Vector result = vector1 % vector2;
        -:  136:
        -:  137:    double x, y, z;
        1:  138:    result.get_end_point(x, y, z);
        1:  139:    CHECK_EQUAL(0.0, x);
        1:  140:    CHECK_EQUAL(0.0, y);
        1:  141:    CHECK_EQUAL(1.0, z);
        1:  142:}
------------------
_ZNK16TestVector_cross7RunImplEv:
        1:  131:TEST(Vector_cross) {
        1:  132:    Vector vector1(0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        1:  133:    Vector vector2(0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
        -:  134:
        1:  135:    Vector result = vector1 % vector2;
        -:  136:
        -:  137:    double x, y, z;
        1:  138:    result.get_end_point(x, y, z);
        1:  139:    CHECK_EQUAL(0.0, x);
        1:  140:    CHECK_EQUAL(0.0, y);
        1:  141:    CHECK_EQUAL(1.0, z);
        1:  142:}
------------------
_ZN16TestVector_crossC2Ev:
        1:  131:TEST(Vector_cross) {
------------------
        -:  143:
        2:  144:TEST(Vector_miltiplication_num) {
        1:  145:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  146:
        1:  147:    Vector result = vector * 2.5;
        -:  148:
        -:  149:    double x, y, z;
        1:  150:    result.get_end_point(x, y, z);
        1:  151:    CHECK_CLOSE(2.5, x, 1e-10);
        1:  152:    CHECK_CLOSE(5.0, y, 1e-10);
        1:  153:    CHECK_CLOSE(7.5, z, 1e-10);
        1:  154:}
------------------
_ZNK29TestVector_miltiplication_num7RunImplEv:
        1:  144:TEST(Vector_miltiplication_num) {
        1:  145:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  146:
        1:  147:    Vector result = vector * 2.5;
        -:  148:
        -:  149:    double x, y, z;
        1:  150:    result.get_end_point(x, y, z);
        1:  151:    CHECK_CLOSE(2.5, x, 1e-10);
        1:  152:    CHECK_CLOSE(5.0, y, 1e-10);
        1:  153:    CHECK_CLOSE(7.5, z, 1e-10);
        1:  154:}
------------------
_ZN29TestVector_miltiplication_numC2Ev:
        1:  144:TEST(Vector_miltiplication_num) {
------------------
        -:  155:
        2:  156:TEST(Vector_miltiplication_num_assignment) {
        1:  157:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  158:
        1:  159:    vector *= 2.0;
        -:  160:
        -:  161:    double x, y, z;
        1:  162:    vector.get_end_point(x, y, z);
        1:  163:    CHECK_EQUAL(2.0, x);
        1:  164:    CHECK_EQUAL(4.0, y);
        1:  165:    CHECK_EQUAL(6.0, z);
        1:  166:}
------------------
_ZNK40TestVector_miltiplication_num_assignment7RunImplEv:
        1:  156:TEST(Vector_miltiplication_num_assignment) {
        1:  157:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  158:
        1:  159:    vector *= 2.0;
        -:  160:
        -:  161:    double x, y, z;
        1:  162:    vector.get_end_point(x, y, z);
        1:  163:    CHECK_EQUAL(2.0, x);
        1:  164:    CHECK_EQUAL(4.0, y);
        1:  165:    CHECK_EQUAL(6.0, z);
        1:  166:}
------------------
_ZN40TestVector_miltiplication_num_assignmentC2Ev:
        1:  156:TEST(Vector_miltiplication_num_assignment) {
------------------
        -:  167:
        2:  168:TEST(Vector_division) {
        1:  169:    Vector vector(0.0, 0.0, 0.0, 4.0, 6.0, 8.0);
        -:  170:
        1:  171:    Vector result = vector / 2.0;
        -:  172:
        -:  173:    double x, y, z;
        1:  174:    result.get_end_point(x, y, z);
        1:  175:    CHECK_EQUAL(2.0, x);
        1:  176:    CHECK_EQUAL(3.0, y);
        1:  177:    CHECK_EQUAL(4.0, z);
        1:  178:}
------------------
_ZNK19TestVector_division7RunImplEv:
        1:  168:TEST(Vector_division) {
        1:  169:    Vector vector(0.0, 0.0, 0.0, 4.0, 6.0, 8.0);
        -:  170:
        1:  171:    Vector result = vector / 2.0;
        -:  172:
        -:  173:    double x, y, z;
        1:  174:    result.get_end_point(x, y, z);
        1:  175:    CHECK_EQUAL(2.0, x);
        1:  176:    CHECK_EQUAL(3.0, y);
        1:  177:    CHECK_EQUAL(4.0, z);
        1:  178:}
------------------
_ZN19TestVector_divisionC2Ev:
        1:  168:TEST(Vector_division) {
------------------
        -:  179:
        2:  180:TEST(Vector_division_assignment) {
        1:  181:    Vector vector(0.0, 0.0, 0.0, 4.0, 6.0, 8.0);
        -:  182:
        1:  183:    vector /= 2.0;
        -:  184:
        -:  185:    double x, y, z;
        1:  186:    vector.get_end_point(x, y, z);
        1:  187:    CHECK_EQUAL(2.0, x);
        1:  188:    CHECK_EQUAL(3.0, y);
        1:  189:    CHECK_EQUAL(4.0, z);
        1:  190:}
------------------
_ZNK30TestVector_division_assignment7RunImplEv:
        1:  180:TEST(Vector_division_assignment) {
        1:  181:    Vector vector(0.0, 0.0, 0.0, 4.0, 6.0, 8.0);
        -:  182:
        1:  183:    vector /= 2.0;
        -:  184:
        -:  185:    double x, y, z;
        1:  186:    vector.get_end_point(x, y, z);
        1:  187:    CHECK_EQUAL(2.0, x);
        1:  188:    CHECK_EQUAL(3.0, y);
        1:  189:    CHECK_EQUAL(4.0, z);
        1:  190:}
------------------
_ZN30TestVector_division_assignmentC2Ev:
        1:  180:TEST(Vector_division_assignment) {
------------------
        -:  191:
        2:  192:TEST(Vector_division_by_zero) {
        1:  193:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  194:
       1*:  195:    CHECK_THROW(vector / 0.0, runtime_error);
       1*:  196:    CHECK_THROW(vector /= 0.0, runtime_error);
        1:  197:}
------------------
_ZNK27TestVector_division_by_zero7RunImplEv:
        1:  192:TEST(Vector_division_by_zero) {
        1:  193:    Vector vector(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  194:
       1*:  195:    CHECK_THROW(vector / 0.0, runtime_error);
       1*:  196:    CHECK_THROW(vector /= 0.0, runtime_error);
        1:  197:}
------------------
_ZN27TestVector_division_by_zeroC2Ev:
        1:  192:TEST(Vector_division_by_zero) {
------------------
        -:  198:
        2:  199:TEST(Vector_cosine) {
        1:  200:    Vector vector1(0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        1:  201:    Vector vector2(0.0, 0.0, 0.0, 1.0, 1.0, 0.0);
        -:  202:
        1:  203:    double cos = vector1 ^ vector2;
        1:  204:    double expected = 1.0 / sqrt(2.0);
        -:  205:
        1:  206:    CHECK_CLOSE(expected, cos, 1e-10);
        1:  207:}
------------------
_ZNK17TestVector_cosine7RunImplEv:
        1:  199:TEST(Vector_cosine) {
        1:  200:    Vector vector1(0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
        1:  201:    Vector vector2(0.0, 0.0, 0.0, 1.0, 1.0, 0.0);
        -:  202:
        1:  203:    double cos = vector1 ^ vector2;
        1:  204:    double expected = 1.0 / sqrt(2.0);
        -:  205:
        1:  206:    CHECK_CLOSE(expected, cos, 1e-10);
        1:  207:}
------------------
_ZN17TestVector_cosineC2Ev:
        1:  199:TEST(Vector_cosine) {
------------------
        -:  208:
        2:  209:TEST(Vector_comparison) {
        1:  210:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  211:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  212:    Vector vector3(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        1:  213:    Vector vector4(1.0, 1.0, 1.0, 2.0, 3.0, 4.0);
        -:  214:
       1*:  215:    CHECK(vector1 == vector2);
       1*:  216:    CHECK(!(vector1 == vector3));
        -:  217:
       1*:  218:    CHECK(vector1 != vector3);
       1*:  219:    CHECK(!(vector1 != vector2));
        -:  220:
       1*:  221:    CHECK(vector3 > vector1);
       1*:  222:    CHECK(!(vector1 > vector3));
        -:  223:
       1*:  224:    CHECK(vector3 >= vector1);
       1*:  225:    CHECK(vector1 >= vector2);
       1*:  226:    CHECK(!(vector1 >= vector3));
        -:  227:
       1*:  228:    CHECK(vector1 < vector3);
       1*:  229:    CHECK(!(vector3 < vector1));
        -:  230:
       1*:  231:    CHECK(vector1 <= vector3);
       1*:  232:    CHECK(vector1 <= vector2);
       1*:  233:    CHECK(!(vector3 <= vector1));
        -:  234:
       1*:  235:    CHECK(vector1 <= vector4);
       1*:  236:    CHECK(vector1 >= vector4);
       1*:  237:    CHECK(!(vector1 < vector4));
       1*:  238:    CHECK(!(vector1 > vector4));
        1:  239:}
------------------
_ZNK21TestVector_comparison7RunImplEv:
        1:  209:TEST(Vector_comparison) {
        1:  210:    Vector vector1(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  211:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        1:  212:    Vector vector3(0.0, 0.0, 0.0, 4.0, 5.0, 6.0);
        1:  213:    Vector vector4(1.0, 1.0, 1.0, 2.0, 3.0, 4.0);
        -:  214:
       1*:  215:    CHECK(vector1 == vector2);
       1*:  216:    CHECK(!(vector1 == vector3));
        -:  217:
       1*:  218:    CHECK(vector1 != vector3);
       1*:  219:    CHECK(!(vector1 != vector2));
        -:  220:
       1*:  221:    CHECK(vector3 > vector1);
       1*:  222:    CHECK(!(vector1 > vector3));
        -:  223:
       1*:  224:    CHECK(vector3 >= vector1);
       1*:  225:    CHECK(vector1 >= vector2);
       1*:  226:    CHECK(!(vector1 >= vector3));
        -:  227:
       1*:  228:    CHECK(vector1 < vector3);
       1*:  229:    CHECK(!(vector3 < vector1));
        -:  230:
       1*:  231:    CHECK(vector1 <= vector3);
       1*:  232:    CHECK(vector1 <= vector2);
       1*:  233:    CHECK(!(vector3 <= vector1));
        -:  234:
       1*:  235:    CHECK(vector1 <= vector4);
       1*:  236:    CHECK(vector1 >= vector4);
       1*:  237:    CHECK(!(vector1 < vector4));
       1*:  238:    CHECK(!(vector1 > vector4));
        1:  239:}
------------------
_ZN21TestVector_comparisonC2Ev:
        1:  209:TEST(Vector_comparison) {
------------------
        -:  240:
        2:  241:TEST(Vector_assignment) {
        1:  242:    Vector original(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        1:  243:    Vector copy;
        -:  244:
        1:  245:    copy = original;
        -:  246:
        -:  247:    double x1, y1, z1, x2, y2, z2;
        -:  248:
        1:  249:    original.get_start_point(x1, y1, z1);
        1:  250:    copy.get_start_point(x2, y2, z2);
        1:  251:    CHECK_EQUAL(x1, x2);
        1:  252:    CHECK_EQUAL(y1, y2);
        1:  253:    CHECK_EQUAL(z1, z2);
        -:  254:
        1:  255:    original.get_end_point(x1, y1, z1);
        1:  256:    copy.get_end_point(x2, y2, z2);
        1:  257:    CHECK_EQUAL(x1, x2);
        1:  258:    CHECK_EQUAL(y1, y2);
        1:  259:    CHECK_EQUAL(z1, z2);
        1:  260:}
------------------
_ZNK21TestVector_assignment7RunImplEv:
        1:  241:TEST(Vector_assignment) {
        1:  242:    Vector original(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        1:  243:    Vector copy;
        -:  244:
        1:  245:    copy = original;
        -:  246:
        -:  247:    double x1, y1, z1, x2, y2, z2;
        -:  248:
        1:  249:    original.get_start_point(x1, y1, z1);
        1:  250:    copy.get_start_point(x2, y2, z2);
        1:  251:    CHECK_EQUAL(x1, x2);
        1:  252:    CHECK_EQUAL(y1, y2);
        1:  253:    CHECK_EQUAL(z1, z2);
        -:  254:
        1:  255:    original.get_end_point(x1, y1, z1);
        1:  256:    copy.get_end_point(x2, y2, z2);
        1:  257:    CHECK_EQUAL(x1, x2);
        1:  258:    CHECK_EQUAL(y1, y2);
        1:  259:    CHECK_EQUAL(z1, z2);
        1:  260:}
------------------
_ZN21TestVector_assignmentC2Ev:
        1:  241:TEST(Vector_assignment) {
------------------
        -:  261:
        2:  262:TEST(Vector_output) {
        1:  263:    Vector vector(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:  264:
        1:  265:    stringstream ss;
        1:  266:    ss << vector;
        -:  267:
        1:  268:    string expected = "Start: (1, 2, 3), End: (4, 5, 6)";
        1:  269:    CHECK_EQUAL(expected, ss.str());
        1:  270:}
------------------
_ZNK17TestVector_output7RunImplEv:
        1:  262:TEST(Vector_output) {
        1:  263:    Vector vector(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:  264:
        1:  265:    stringstream ss;
        1:  266:    ss << vector;
        -:  267:
        1:  268:    string expected = "Start: (1, 2, 3), End: (4, 5, 6)";
        1:  269:    CHECK_EQUAL(expected, ss.str());
        1:  270:}
------------------
_ZN17TestVector_outputC2Ev:
        1:  262:TEST(Vector_output) {
------------------
        -:  271:
        2:  272:TEST(Vector_input) {
        1:  273:    Vector vector;
        -:  274:
        2:  275:    stringstream ss("1.0 2.0 3.0 4.0 5.0 6.0");
        1:  276:    ss >> vector;
        -:  277:
        -:  278:    double x, y, z;
        1:  279:    vector.get_start_point(x, y, z);
        1:  280:    CHECK_EQUAL(1.0, x);
        1:  281:    CHECK_EQUAL(2.0, y);
        1:  282:    CHECK_EQUAL(3.0, z);
        -:  283:
        1:  284:    vector.get_end_point(x, y, z);
        1:  285:    CHECK_EQUAL(4.0, x);
        1:  286:    CHECK_EQUAL(5.0, y);
        1:  287:    CHECK_EQUAL(6.0, z);
        1:  288:}
------------------
_ZNK16TestVector_input7RunImplEv:
        1:  272:TEST(Vector_input) {
        1:  273:    Vector vector;
        -:  274:
        2:  275:    stringstream ss("1.0 2.0 3.0 4.0 5.0 6.0");
        1:  276:    ss >> vector;
        -:  277:
        -:  278:    double x, y, z;
        1:  279:    vector.get_start_point(x, y, z);
        1:  280:    CHECK_EQUAL(1.0, x);
        1:  281:    CHECK_EQUAL(2.0, y);
        1:  282:    CHECK_EQUAL(3.0, z);
        -:  283:
        1:  284:    vector.get_end_point(x, y, z);
        1:  285:    CHECK_EQUAL(4.0, x);
        1:  286:    CHECK_EQUAL(5.0, y);
        1:  287:    CHECK_EQUAL(6.0, z);
        1:  288:}
------------------
_ZN16TestVector_inputC2Ev:
        1:  272:TEST(Vector_input) {
------------------
        -:  289:
        2:  290:TEST(Vector_float) {
        1:  291:    Vector vector1(0.0, 0.0, 0.0, 1.0000001, 2.0000001, 3.0000001);
        1:  292:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  293:
       1*:  294:    CHECK(vector1 != vector2);
        1:  295:}
------------------
_ZNK16TestVector_float7RunImplEv:
        1:  290:TEST(Vector_float) {
        1:  291:    Vector vector1(0.0, 0.0, 0.0, 1.0000001, 2.0000001, 3.0000001);
        1:  292:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  293:
       1*:  294:    CHECK(vector1 != vector2);
        1:  295:}
------------------
_ZN16TestVector_floatC2Ev:
        1:  290:TEST(Vector_float) {
------------------
        -:  296:
        2:  297:TEST(VectorFloatingPointInequality) {
        1:  298:    Vector vector1(0.0, 0.0, 0.0, 1.1, 2.0, 3.0);
        1:  299:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  300:
       1*:  301:    CHECK(vector1 != vector2);
        1:  302:}
------------------
_ZNK33TestVectorFloatingPointInequality7RunImplEv:
        1:  297:TEST(VectorFloatingPointInequality) {
        1:  298:    Vector vector1(0.0, 0.0, 0.0, 1.1, 2.0, 3.0);
        1:  299:    Vector vector2(0.0, 0.0, 0.0, 1.0, 2.0, 3.0);
        -:  300:
       1*:  301:    CHECK(vector1 != vector2);
        1:  302:}
------------------
_ZN33TestVectorFloatingPointInequalityC2Ev:
        1:  297:TEST(VectorFloatingPointInequality) {
------------------
        -:  303:
        2:  304:TEST(Vector_zero_length) {
        1:  305:    Vector vector;
        1:  306:    CHECK_EQUAL(0.0, vector.length());
        1:  307:}
------------------
_ZNK22TestVector_zero_length7RunImplEv:
        1:  304:TEST(Vector_zero_length) {
        1:  305:    Vector vector;
        1:  306:    CHECK_EQUAL(0.0, vector.length());
        1:  307:}
------------------
_ZN22TestVector_zero_lengthC2Ev:
        1:  304:TEST(Vector_zero_length) {
------------------
        -:  308:
        2:  309:TEST(Vector_perp) {
        1:  310:    Vector vector1(0.0, 0.0, 0.0, 3.0, 0.0, 0.0);
        1:  311:    Vector vector2(0.0, 0.0, 0.0, 0.0, 4.0, 0.0);
        -:  312:
        1:  313:    Vector result = vector1 % vector2;
        -:  314:
        -:  315:    double x, y, z;
        1:  316:    result.get_end_point(x, y, z);
        1:  317:    CHECK_EQUAL(0.0, x);
        1:  318:    CHECK_EQUAL(0.0, y);
        1:  319:    CHECK_EQUAL(12.0, z);
        1:  320:}
------------------
_ZNK15TestVector_perp7RunImplEv:
        1:  309:TEST(Vector_perp) {
        1:  310:    Vector vector1(0.0, 0.0, 0.0, 3.0, 0.0, 0.0);
        1:  311:    Vector vector2(0.0, 0.0, 0.0, 0.0, 4.0, 0.0);
        -:  312:
        1:  313:    Vector result = vector1 % vector2;
        -:  314:
        -:  315:    double x, y, z;
        1:  316:    result.get_end_point(x, y, z);
        1:  317:    CHECK_EQUAL(0.0, x);
        1:  318:    CHECK_EQUAL(0.0, y);
        1:  319:    CHECK_EQUAL(12.0, z);
        1:  320:}
------------------
_ZN15TestVector_perpC2Ev:
        1:  309:TEST(Vector_perp) {
------------------
        -:  321:
        2:  322:TEST(Vector_parallel) {
        1:  323:    Vector vector1(0.0, 0.0, 0.0, 2.0, 0.0, 0.0);
        1:  324:    Vector vector2(0.0, 0.0, 0.0, 5.0, 0.0, 0.0);
        -:  325:
        1:  326:    double cos = vector1 ^ vector2;
        1:  327:    CHECK_EQUAL(1.0, cos);
        1:  328:}
------------------
_ZNK19TestVector_parallel7RunImplEv:
        1:  322:TEST(Vector_parallel) {
        1:  323:    Vector vector1(0.0, 0.0, 0.0, 2.0, 0.0, 0.0);
        1:  324:    Vector vector2(0.0, 0.0, 0.0, 5.0, 0.0, 0.0);
        -:  325:
        1:  326:    double cos = vector1 ^ vector2;
        1:  327:    CHECK_EQUAL(1.0, cos);
        1:  328:}
------------------
_ZN19TestVector_parallelC2Ev:
        1:  322:TEST(Vector_parallel) {
------------------
        2:  329:TEST(Vector_opposite) {
        1:  330:    Vector vector1(0.0, 0.0, 0.0, 2.0, 0.0, 0.0);
        1:  331:    Vector vector2(0.0, 0.0, 0.0, -3.0, 0.0, 0.0);
        -:  332:
        1:  333:    double cos = vector1 ^ vector2;
        1:  334:    CHECK_EQUAL(-1.0, cos);
        1:  335:}
------------------
_ZNK19TestVector_opposite7RunImplEv:
        1:  329:TEST(Vector_opposite) {
        1:  330:    Vector vector1(0.0, 0.0, 0.0, 2.0, 0.0, 0.0);
        1:  331:    Vector vector2(0.0, 0.0, 0.0, -3.0, 0.0, 0.0);
        -:  332:
        1:  333:    double cos = vector1 ^ vector2;
        1:  334:    CHECK_EQUAL(-1.0, cos);
        1:  335:}
------------------
_ZN19TestVector_oppositeC2Ev:
        1:  329:TEST(Vector_opposite) {
------------------
        -:  336:
        2:  337:TEST(Vector_perp_cosine) {
        1:  338:    Vector vector1(0.0, 0.0, 0.0, 3.0, 0.0, 0.0);
        1:  339:    Vector vector2(0.0, 0.0, 0.0, 0.0, 4.0, 0.0);
        -:  340:
        1:  341:    double cos = vector1 ^ vector2;
        1:  342:    CHECK_EQUAL(0.0, cos);
        1:  343:}
------------------
_ZNK22TestVector_perp_cosine7RunImplEv:
        1:  337:TEST(Vector_perp_cosine) {
        1:  338:    Vector vector1(0.0, 0.0, 0.0, 3.0, 0.0, 0.0);
        1:  339:    Vector vector2(0.0, 0.0, 0.0, 0.0, 4.0, 0.0);
        -:  340:
        1:  341:    double cos = vector1 ^ vector2;
        1:  342:    CHECK_EQUAL(0.0, cos);
        1:  343:}
------------------
_ZN22TestVector_perp_cosineC2Ev:
        1:  337:TEST(Vector_perp_cosine) {
------------------
        -:  344:
        2:  345:TEST(Vector_negative_coordinates) {
        1:  346:    Vector vector1(1.0, 2.0, 3.0, -1.0, -2.0, -3.0);
        1:  347:    Vector vector2(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:  348:
        1:  349:    Vector result = vector1 + vector2;
        -:  350:
        -:  351:    double x, y, z;
        1:  352:    result.get_end_point(x, y, z);
        1:  353:    CHECK_EQUAL(2.0, x);
        1:  354:    CHECK_EQUAL(1.0, y);
        1:  355:    CHECK_EQUAL(0.0, z);
        1:  356:}
------------------
_ZNK31TestVector_negative_coordinates7RunImplEv:
        1:  345:TEST(Vector_negative_coordinates) {
        1:  346:    Vector vector1(1.0, 2.0, 3.0, -1.0, -2.0, -3.0);
        1:  347:    Vector vector2(1.0, 2.0, 3.0, 4.0, 5.0, 6.0);
        -:  348:
        1:  349:    Vector result = vector1 + vector2;
        -:  350:
        -:  351:    double x, y, z;
        1:  352:    result.get_end_point(x, y, z);
        1:  353:    CHECK_EQUAL(2.0, x);
        1:  354:    CHECK_EQUAL(1.0, y);
        1:  355:    CHECK_EQUAL(0.0, z);
        1:  356:}
------------------
_ZN31TestVector_negative_coordinatesC2Ev:
        1:  345:TEST(Vector_negative_coordinates) {
------------------
        2:  357:TEST(Vector_negative_multiplication) {
        1:  358:    Vector vector(0.0, 0.0, 0.0, 2.0, -3.0, 4.0);
        -:  359:
        1:  360:    Vector result = vector * -2.0;
        -:  361:
        -:  362:    double x, y, z;
        1:  363:    result.get_end_point(x, y, z);
        1:  364:    CHECK_EQUAL(-4.0, x);
        1:  365:    CHECK_EQUAL(6.0, y);
        1:  366:    CHECK_EQUAL(-8.0, z);
        1:  367:}
------------------
_ZNK34TestVector_negative_multiplication7RunImplEv:
        1:  357:TEST(Vector_negative_multiplication) {
        1:  358:    Vector vector(0.0, 0.0, 0.0, 2.0, -3.0, 4.0);
        -:  359:
        1:  360:    Vector result = vector * -2.0;
        -:  361:
        -:  362:    double x, y, z;
        1:  363:    result.get_end_point(x, y, z);
        1:  364:    CHECK_EQUAL(-4.0, x);
        1:  365:    CHECK_EQUAL(6.0, y);
        1:  366:    CHECK_EQUAL(-8.0, z);
        1:  367:}
------------------
_ZN34TestVector_negative_multiplicationC2Ev:
        1:  357:TEST(Vector_negative_multiplication) {
------------------
        -:  368:
        2:  369:TEST(Vector_negative_assighnment) {
        1:  370:    Vector vector(0.0, 0.0, 0.0, 2.0, -3.0, 4.0);
        -:  371:    double x, y, z;
        1:  372:    vector *= -1.0;
        1:  373:    vector.get_end_point(x, y, z);
        1:  374:    CHECK_EQUAL(-2.0, x);
        1:  375:    CHECK_EQUAL(3.0, y);
        1:  376:    CHECK_EQUAL(-4.0, z);
        1:  377:}
------------------
_ZNK31TestVector_negative_assighnment7RunImplEv:
        1:  369:TEST(Vector_negative_assighnment) {
        1:  370:    Vector vector(0.0, 0.0, 0.0, 2.0, -3.0, 4.0);
        -:  371:    double x, y, z;
        1:  372:    vector *= -1.0;
        1:  373:    vector.get_end_point(x, y, z);
        1:  374:    CHECK_EQUAL(-2.0, x);
        1:  375:    CHECK_EQUAL(3.0, y);
        1:  376:    CHECK_EQUAL(-4.0, z);
        1:  377:}
------------------
_ZN31TestVector_negative_assighnmentC2Ev:
        1:  369:TEST(Vector_negative_assighnment) {
------------------
        -:  378:
