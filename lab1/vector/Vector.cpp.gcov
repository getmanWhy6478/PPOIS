        -:    0:Source:Vector.cpp
        -:    1:#include "Vector.h"
        -:    2:#include <UnitTest++/UnitTest++.h>
        -:    3:using namespace std;
        4:    4:Vector::Vector() : x_start(0), y_start(0), z_start(0), x_end(0), y_end(0), z_end(0) {}
        -:    5:
       54:    6:Vector::Vector(double start_x, double start_y, double start_z,
       54:    7:    double end_x, double end_y, double end_z)
       54:    8:    : x_start(start_x), y_start(start_y), z_start(start_z), x_end(end_x), y_end(end_y), z_end(end_z) {
       54:    9:};
        -:   10:
        1:   11:Vector::Vector(const Vector& second_vector)
        1:   12:    : x_start(second_vector.x_start), y_start(second_vector.y_start), z_start(second_vector.z_start),
        1:   13:    x_end(second_vector.x_end), y_end(second_vector.y_end), z_end(second_vector.z_end) {
        1:   14:};
        -:   15:
        7:   16:void Vector::get_start_point(double& x, double& y, double& z) const {
        7:   17:    x = x_start;
        7:   18:    y = y_start;
        7:   19:    z = z_start;
        7:   20:}
        -:   21:
       20:   22:void Vector::get_end_point(double& x, double& y, double& z) const {
       20:   23:    x = x_end;
       20:   24:    y = y_end;
       20:   25:    z = z_end;
       20:   26:}
        -:   27:
       40:   28:double Vector::length() const {
       40:   29:    double len_x = x_end - x_start;
       40:   30:    double len_y = y_end - y_start;
       40:   31:    double len_z = z_end - z_start;
       40:   32:    return sqrt(len_x * len_x + len_y * len_y + len_z * len_z);
        -:   33:}
        -:   34:
        2:   35:Vector Vector::operator+(const Vector& second_vector) const {
        2:   36:    return Vector(x_start, y_start, z_start,
        2:   37:        x_end + second_vector.x_end - second_vector.x_start,
        2:   38:        y_end + second_vector.y_end - second_vector.y_start,
        2:   39:        z_end + second_vector.z_end - second_vector.z_start);
        -:   40:}
        -:   41:
        1:   42:Vector& Vector::operator+=(const Vector& second_vector) {
        1:   43:    x_end += second_vector.x_end - second_vector.x_start;
        1:   44:    y_end += second_vector.y_end - second_vector.y_start;
        1:   45:    z_end += second_vector.z_end - second_vector.z_start;
        1:   46:    return *this;
        -:   47:}
        -:   48:
        1:   49:Vector Vector::operator-(const Vector& second_vector) const {
        1:   50:    return Vector(x_start, y_start, z_start,
        1:   51:        x_end - (second_vector.x_end - second_vector.x_start),
        1:   52:        y_end - (second_vector.y_end - second_vector.y_start),
        1:   53:        z_end - (second_vector.z_end - second_vector.z_start));
        -:   54:}
        -:   55:
        1:   56:Vector& Vector::operator-=(const Vector& second_vector) {
        1:   57:    x_end -= second_vector.x_end - second_vector.x_start;
        1:   58:    y_end -= second_vector.y_end - second_vector.y_start;
        1:   59:    z_end -= second_vector.z_end - second_vector.z_start;
        1:   60:    return *this;
        -:   61:}
        -:   62:
        5:   63:double Vector::operator*(const Vector& second_vector) const {
        5:   64:    double len_x = x_end - x_start;
        5:   65:    double len_y = y_end - y_start;
        5:   66:    double len_z = z_end - z_start;
        -:   67:
        5:   68:    double len_x_second_vector = second_vector.x_end - second_vector.x_start;
        5:   69:    double len_y_second_vector = second_vector.y_end - second_vector.y_start;
        5:   70:    double len_z_second_vector = second_vector.z_end - second_vector.z_start;
        -:   71:
        5:   72:    return len_x * len_x_second_vector + len_y * len_y_second_vector + len_z * len_z_second_vector;
        -:   73:}
        -:   74:
        2:   75:Vector Vector::operator%(const Vector& second_vector) const {
        2:   76:    double len_x = x_end - x_start;
        2:   77:    double len_y = y_end - y_start;
        2:   78:    double len_z = z_end - z_start;
        -:   79:
        2:   80:    double len_x_second_vector = second_vector.x_end - second_vector.x_start;
        2:   81:    double len_y_second_vector = second_vector.y_end - second_vector.y_start;
        2:   82:    double len_z_second_vector = second_vector.z_end - second_vector.z_start;
        -:   83:
        2:   84:    double res_x = len_y * len_z_second_vector - len_z * len_y_second_vector;
        2:   85:    double res_y = len_z * len_x_second_vector - len_x * len_z_second_vector;
        2:   86:    double res_z = len_x * len_y_second_vector - len_y * len_x_second_vector;
        -:   87:
        2:   88:    return Vector(0, 0, 0, res_x, res_y, res_z);
        -:   89:}
        -:   90:
        3:   91:Vector Vector::operator*(double num) const {
        3:   92:    return Vector(x_start, y_start, z_start,
        3:   93:        x_start + (x_end - x_start) * num,
        3:   94:        y_start + (y_end - y_start) * num,
        3:   95:        z_start + (z_end - z_start) * num);
        -:   96:}
        -:   97:
        3:   98:Vector& Vector::operator*=(double num) {
        3:   99:    x_end = x_start + (x_end - x_start) * num;
        3:  100:    y_end = y_start + (y_end - y_start) * num;
        3:  101:    z_end = z_start + (z_end - z_start) * num;
        3:  102:    return *this;
        -:  103:}
        -:  104:
        2:  105:Vector Vector::operator/(double num) const {
        2:  106:    if (num == 0) {
        1:  107:        throw runtime_error("Division by zero");
        -:  108:    }
        1:  109:    return *this * (1.0 / num);
        -:  110:}
        -:  111:
        2:  112:Vector& Vector::operator/=(double num) {
        2:  113:    if (num == 0) {
        1:  114:        throw runtime_error("Division by zero");
        -:  115:    }
        1:  116:    return *this *= (1.0 / num);
        -:  117:}
        -:  118:
        4:  119:double Vector::operator^(const Vector& second_vector) const {
        4:  120:    double dotProduct = *this * second_vector;
        4:  121:    double length1 = this->length();
        4:  122:    double length2 = second_vector.length();
        -:  123:
        4:  124:    if (length1 == 0 || length2 == 0) {
    #####:  125:        throw runtime_error("Zero vector length");
        -:  126:    }
        -:  127:
        4:  128:    return dotProduct / (length1 * length2);
        -:  129:}
        -:  130:
        6:  131:bool Vector::operator==(const Vector& second_vector) const {
        6:  132:    return (x_start == second_vector.x_start && y_start == second_vector.y_start && z_start == second_vector.z_start &&
       12:  133:        x_end == second_vector.x_end && y_end == second_vector.y_end && z_end == second_vector.z_end);
        -:  134:}
        -:  135:
        4:  136:bool Vector::operator!=(const Vector& second_vector) const {
        4:  137:    return !(*this == second_vector);
        -:  138:}
        -:  139:
        3:  140:bool Vector::operator>(const Vector& second_vector) const {
        3:  141:    return this->length() > second_vector.length();
        -:  142:}
        -:  143:
        4:  144:bool Vector::operator>=(const Vector& second_vector) const {
        4:  145:    return this->length() >= second_vector.length();
        -:  146:}
        -:  147:
        3:  148:bool Vector::operator<(const Vector& second_vector) const {
        3:  149:    return this->length() < second_vector.length();
        -:  150:}
        -:  151:
        4:  152:bool Vector::operator<=(const Vector& second_vector) const {
        4:  153:    return this->length() <= second_vector.length();
        -:  154:}
        -:  155:
        1:  156:Vector& Vector::operator=(const Vector& second_vector) {
        1:  157:    if (this != &second_vector) {
        1:  158:        x_start = second_vector.x_start;
        1:  159:        y_start = second_vector.y_start;
        1:  160:        z_start = second_vector.z_start;
        1:  161:        x_end = second_vector.x_end;
        1:  162:        y_end = second_vector.y_end;
        1:  163:        z_end = second_vector.z_end;
        -:  164:    }
        1:  165:    return *this;
        -:  166:}
        -:  167:
        1:  168:ostream& operator<<(ostream& os, const Vector& vec) {
        1:  169:    os << "Start: (" << vec.x_start << ", " << vec.y_start << ", " << vec.z_start << "), "
        1:  170:        << "End: (" << vec.x_end << ", " << vec.y_end << ", " << vec.z_end << ")";
        1:  171:    return os;
        -:  172:}
        -:  173:
        1:  174:istream& operator>>(istream& is, Vector& vec) {
        1:  175:    is >> vec.x_start >> vec.y_start >> vec.z_start >> vec.x_end >> vec.y_end >> vec.z_end;
        1:  176:    return is;
        -:  177:}
        1:  178:int main() {
        1:  179:    return UnitTest::RunAllTests();
        -:  180:}
